{"ast":null,"code":"import{useState}from'react';import{FlashcardArray}from'react-quizlet-flashcard';import\"react-quizlet-flashcard/dist/index.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function FlashcardMode(_ref){let{cards,practiceStarredOnly=false,starredCount=0}=_ref;const[isReversed,setIsReversed]=useState(false);// Filter cards based on practiceStarredOnly prop\nconst filteredCards=practiceStarredOnly?cards.filter(card=>card.starred===1||card.starred===true):cards;const createCards=(cards,reversed)=>{// Create deck only when cards are available\nif(!cards||cards.length===0)return[];return cards.map(card=>({front:{html:/*#__PURE__*/_jsx(\"div\",{style:{display:\"grid\",placeItems:\"center\",// centers both horizontally + vertically\nheight:\"100%\",fontSize:\"3.5rem\",textAlign:\"center\"// keeps multi-line text centered\n},children:reversed?card.translation:card.term})},back:{html:/*#__PURE__*/_jsx(\"div\",{style:{display:\"grid\",placeItems:\"center\",height:\"100%\",fontSize:\"3.5rem\",textAlign:\"center\"},children:reversed?card.term:card.translation})}}));};// Create the deck using the filtered cards\nconst deck=createCards(filteredCards,isReversed);return/*#__PURE__*/_jsxs(\"div\",{children:[deck&&deck.length>0?/*#__PURE__*/_jsx(\"div\",{style:{padding:'2rem',justifyContent:'center',alignItems:'center',display:'flex'},children:/*#__PURE__*/_jsx(FlashcardArray,{deck:deck},\"flashcards-\".concat(practiceStarredOnly,\"-\").concat(isReversed,\"-\").concat(deck.length))}):/*#__PURE__*/_jsx(\"p\",{style:{textAlign:'center',fontSize:'18px',padding:'2rem'},children:cards.length===0?'Loading flashcards...':practiceStarredOnly&&starredCount===0?'No starred cards found. Star some cards in the edit page first!':practiceStarredOnly?\"No starred cards available (\".concat(starredCount,\" total)\"):'No cards found for this list.'}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',gap:'1rem'},children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:()=>{// Toggle between normal and reversed\nsetIsReversed(!isReversed);},children:isReversed?'Show Terms First':'Show Translations First'})})]});}","map":{"version":3,"names":["useState","FlashcardArray","jsx","_jsx","jsxs","_jsxs","FlashcardMode","_ref","cards","practiceStarredOnly","starredCount","isReversed","setIsReversed","filteredCards","filter","card","starred","createCards","reversed","length","map","front","html","style","display","placeItems","height","fontSize","textAlign","children","translation","term","back","deck","padding","justifyContent","alignItems","concat","gap","type","onClick"],"sources":["/home/bclason/projects/spanish_app/flash_vocab/frontend/src/components/medleyModes/FlashcardMode.js"],"sourcesContent":["import { useState } from 'react';\nimport { FlashcardArray } from 'react-quizlet-flashcard';\nimport \"react-quizlet-flashcard/dist/index.css\";\n\nexport default function FlashcardMode({ \n  cards, \n  practiceStarredOnly = false, \n  starredCount = 0, \n}) {\n  const [isReversed, setIsReversed] = useState(false);\n\n  // Filter cards based on practiceStarredOnly prop\n  const filteredCards = practiceStarredOnly \n    ? cards.filter(card => card.starred === 1 || card.starred === true)\n    : cards;\n\n  const createCards = (cards, reversed) => {\n    // Create deck only when cards are available\n    if (!cards || cards.length === 0) return [];\n    \n    return cards.map((card) => ({\n      front: {\n        html: (\n          <div\n            style={{\n              display: \"grid\",\n              placeItems: \"center\", // centers both horizontally + vertically\n              height: \"100%\",\n              fontSize: \"3.5rem\",\n              textAlign: \"center\",  // keeps multi-line text centered\n            }}>\n            {reversed ? card.translation : card.term}\n          </div>\n        ),\n      },\n      back: {\n        html: (\n          <div\n            style={{\n              display: \"grid\",\n              placeItems: \"center\",\n              height: \"100%\",\n              fontSize: \"3.5rem\",\n              textAlign: \"center\",\n            }}\n          >\n            {reversed ? card.term : card.translation}\n          </div>\n        ),\n      }\n    }));\n  }\n\n  // Create the deck using the filtered cards\n  const deck = createCards(filteredCards, isReversed);\n\n  return (\n    <div>\n      {/* Flashcards */}\n      {deck && deck.length > 0 ? (\n        <div style={{ \n          padding: '2rem', \n          justifyContent: 'center', \n          alignItems: 'center',\n          display: 'flex', \n          }}>\n          <FlashcardArray \n            deck={deck} \n            key={`flashcards-${practiceStarredOnly}-${isReversed}-${deck.length}`}\n          />\n        </div>\n      ) : (\n        <p style={{ textAlign: 'center', fontSize: '18px', padding: '2rem' }}>\n          {cards.length === 0 \n            ? 'Loading flashcards...' \n            : practiceStarredOnly && starredCount === 0\n            ? 'No starred cards found. Star some cards in the edit page first!'\n            : practiceStarredOnly \n            ? `No starred cards available (${starredCount} total)`\n            : 'No cards found for this list.'\n          }\n        </p>\n      )}\n\n      {/* Reverse Button */}\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        gap: '1rem',\n      }}>\n        <button\n          type=\"button\"\n          onClick={() => {\n            // Toggle between normal and reversed\n            setIsReversed(!isReversed);\n          }}\n        >\n          {isReversed ? 'Show Terms First' : 'Show Translations First'}\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}