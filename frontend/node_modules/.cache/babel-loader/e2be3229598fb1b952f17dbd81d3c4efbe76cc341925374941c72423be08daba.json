{"ast":null,"code":"import _objectSpread from\"/home/bclason/projects/spanish_app/flash_vocab/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useCallback,useMemo,useRef}from'react';import correctSound from'../correct.mp3';import incorrectSound from'../incorrect.mp3';import config from'../../config';// when starred messed up, switching terms with each input\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function MiniQuizMode(_ref){let{cards,practiceStarredOnly=false,onComplete=null}=_ref;const[remainingCards,setRemainingCards]=useState([]);// Cards that haven't been done yet\nconst[answer,setAnswer]=useState('');const[currentTerm,setCurrentTerm]=useState(null);const[status,setStatus]=useState(null);//correct or incorrect\nconst[isReversed,setIsReversed]=useState(false);const[quizStarted,setQuizStarted]=useState(false);const[quizComplete,setQuizComplete]=useState(false);const[cardAccuracyUpdates,setCardAccuracyUpdates]=useState({});const inputRef=useRef(null);// Filter cards based on practiceStarredOnly prop\nconst filteredCards=useMemo(()=>{return practiceStarredOnly?cards.filter(card=>card.starred===1||card.starred===true):cards;},[cards,practiceStarredOnly]);// Initialize remaining cards when cards or filtering changes\nuseEffect(()=>{setRemainingCards([...filteredCards]);setCurrentTerm(null);// Clear current term so a new one gets selected\nsetQuizStarted(true);// Mark that quiz has started\n},[cards,practiceStarredOnly,filteredCards]);const getRandomTerm=useCallback(()=>{if(remainingCards.length===0)return;const randomIndex=Math.floor(Math.random()*remainingCards.length);const selectedCard=remainingCards[randomIndex];// Apply any accuracy updates we've tracked for this card\nconst updatedCard=cardAccuracyUpdates[selectedCard.id]?_objectSpread(_objectSpread({},selectedCard),cardAccuracyUpdates[selectedCard.id]):selectedCard;setCurrentTerm(updatedCard);},[remainingCards,cardAccuracyUpdates]);// get new term\nuseEffect(()=>{if(remainingCards.length>0&&!currentTerm){getRandomTerm();}},[remainingCards,getRandomTerm,currentTerm]);// Focus input when a new term appears\nuseEffect(()=>{if(currentTerm&&inputRef.current){inputRef.current.focus();}},[currentTerm]);const handleSubmit=e=>{e.preventDefault();const correctAnswer=isReversed?currentTerm.term:currentTerm.translation;const secondaryAnswer=isReversed?'':currentTerm.secondary_translation;// Check if answer matches correct answer or secondary translation (case-insensitive)\nconst answerLower=answer.toLowerCase().trim();const correctAnswerLower=correctAnswer.toLowerCase().trim();const secondaryAnswerLower=secondaryAnswer?secondaryAnswer.toLowerCase().trim():'';if(answerLower===correctAnswerLower||secondaryAnswerLower&&answerLower===secondaryAnswerLower){new Audio(correctSound).play();setStatus('correct');updateAccuracy(true);setTimeout(()=>{setAnswer('');const newRemainingCards=remainingCards.filter(card=>card.id!==currentTerm.id);setRemainingCards(newRemainingCards);// Check if quiz is complete after removing this card\nif(newRemainingCards.length===0&&quizStarted&&!quizComplete){setQuizComplete(true);}else{// Clear current term so useEffect will pick a new one\nsetCurrentTerm(null);}setStatus(null);},300);}else{// incorrect\nnew Audio(incorrectSound).play();setStatus('incorrect');updateAccuracy(false);setTimeout(()=>{alert(\"Incorrect! The correct answer was: \".concat(correctAnswer));},300);setTimeout(()=>{setAnswer('');// New term will be selected automatically by useEffect when remainingCards updates\nsetStatus(null);},300);}};const handleRestart=()=>{setRemainingCards([...filteredCards]);setQuizComplete(false);setCurrentTerm(null);setAnswer('');setStatus(null);// Don't reset cardAccuracyUpdates - keep previous quiz accuracy intact\n};const updateAccuracy=correct=>{if(!currentTerm)return currentTerm;const old_correct=currentTerm.correct_attempts||0;const old_total=currentTerm.total_attempts||0;const new_correct=correct?old_correct+1:old_correct;const new_total=old_total+1;// Update the database\nfetch(\"\".concat(config.API_BASE_URL,\"/cards/\").concat(currentTerm.id),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify({correct_attempts:new_correct,total_attempts:new_total})}).then(response=>{if(!response.ok){throw new Error('Failed to update accuracy');}}).catch(error=>console.error('Error updating accuracy:',error));// Create the updated term\nconst updatedTerm=_objectSpread(_objectSpread({},currentTerm),{},{correct_attempts:new_correct,total_attempts:new_total});setCurrentTerm(updatedTerm);// Track accuracy updates for this card\nsetCardAccuracyUpdates(prev=>{const newUpdates=_objectSpread(_objectSpread({},prev),{},{[currentTerm.id]:{correct_attempts:new_correct,total_attempts:new_total}});return newUpdates;});return updatedTerm;};if(cards.length===0){return/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center',padding:'2rem'},children:\"Loading cards...\"});}if(filteredCards.length===0){return/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center',padding:'2rem'},children:\"No starred cards found. Star some cards in the edit page first!\"});}if(quizComplete&&onComplete){// In medley mode, show completion message briefly before auto-advance\nonComplete();}else if(quizComplete&&!onComplete){// Only show restart button when NOT in medley mode\nreturn/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',gap:'1rem',justifyContent:'center'},children:/*#__PURE__*/_jsx(\"button\",{onClick:handleRestart,style:{padding:'1rem 2rem',fontSize:'1.2rem',cursor:'pointer'},children:\"Restart Quiz\"})})});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{style:{textAlign:'center',fontSize:'1.5rem',padding:'1rem',fontWeight:'550'},children:[filteredCards.length-remainingCards.length,\" / \",filteredCards.length,\" terms completed\"]}),currentTerm&&/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',alignItems:'center',margin:'2rem 0'},children:[/*#__PURE__*/_jsx(\"h2\",{style:{fontSize:'3rem',fontWeight:'bold',color:status==='correct'?'green':status==='incorrect'?'red':'black'},children:isReversed?currentTerm.translation:currentTerm.term}),/*#__PURE__*/_jsx(\"form\",{onSubmit:handleSubmit,children:/*#__PURE__*/_jsx(\"input\",{ref:inputRef,style:{fontSize:'2rem'},type:\"text\",value:answer,onChange:e=>setAnswer(e.target.value),placeholder:\"Type your answer\",autoFocus:true})})]}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center'},children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:()=>{// Toggle between normal and reversed\nsetIsReversed(!isReversed);},children:isReversed?'Display Terms':'Display Translations'})})]});}","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","useRef","correctSound","incorrectSound","config","jsx","_jsx","jsxs","_jsxs","MiniQuizMode","_ref","cards","practiceStarredOnly","onComplete","remainingCards","setRemainingCards","answer","setAnswer","currentTerm","setCurrentTerm","status","setStatus","isReversed","setIsReversed","quizStarted","setQuizStarted","quizComplete","setQuizComplete","cardAccuracyUpdates","setCardAccuracyUpdates","inputRef","filteredCards","filter","card","starred","getRandomTerm","length","randomIndex","Math","floor","random","selectedCard","updatedCard","id","_objectSpread","current","focus","handleSubmit","e","preventDefault","correctAnswer","term","translation","secondaryAnswer","secondary_translation","answerLower","toLowerCase","trim","correctAnswerLower","secondaryAnswerLower","Audio","play","updateAccuracy","setTimeout","newRemainingCards","alert","concat","handleRestart","correct","old_correct","correct_attempts","old_total","total_attempts","new_correct","new_total","fetch","API_BASE_URL","method","headers","body","JSON","stringify","then","response","ok","Error","catch","error","console","updatedTerm","prev","newUpdates","style","textAlign","padding","children","display","gap","justifyContent","onClick","fontSize","cursor","fontWeight","flexDirection","alignItems","margin","color","onSubmit","ref","type","value","onChange","target","placeholder","autoFocus"],"sources":["/home/bclason/projects/spanish_app/flash_vocab/frontend/src/components/medleyModes/MiniQuizMode.js"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport correctSound from '../correct.mp3';\nimport incorrectSound from '../incorrect.mp3';\nimport config from '../../config';\n\n// when starred messed up, switching terms with each input\n\nexport default function MiniQuizMode({ \n  cards, \n  practiceStarredOnly = false, \n  onComplete = null,\n}) {\n  const [remainingCards, setRemainingCards] = useState([]); // Cards that haven't been done yet\n  const [answer, setAnswer] = useState('');\n  const [currentTerm, setCurrentTerm] = useState(null);\n  const [status, setStatus] = useState(null); //correct or incorrect\n  const [isReversed, setIsReversed] = useState(false);\n  const [quizStarted, setQuizStarted] = useState(false);\n  const [quizComplete, setQuizComplete] = useState(false);\n  const [cardAccuracyUpdates, setCardAccuracyUpdates] = useState({});\n  const inputRef = useRef(null);\n\n  // Filter cards based on practiceStarredOnly prop\n  const filteredCards = useMemo(() => {\n    return practiceStarredOnly \n      ? cards.filter(card => card.starred === 1 || card.starred === true)\n      : cards;\n  }, [cards, practiceStarredOnly]);\n\n  // Initialize remaining cards when cards or filtering changes\n  useEffect(() => {\n    setRemainingCards([...filteredCards]);\n    setCurrentTerm(null); // Clear current term so a new one gets selected\n    setQuizStarted(true); // Mark that quiz has started\n  }, [cards, practiceStarredOnly, filteredCards]);\n\n\n  const getRandomTerm = useCallback(() => {\n    if (remainingCards.length === 0) return;\n    const randomIndex = Math.floor(Math.random() * remainingCards.length);\n    const selectedCard = remainingCards[randomIndex];\n    // Apply any accuracy updates we've tracked for this card\n    const updatedCard = cardAccuracyUpdates[selectedCard.id] \n      ? { ...selectedCard, ...cardAccuracyUpdates[selectedCard.id] }\n      : selectedCard;\n      \n    setCurrentTerm(updatedCard);\n  }, [remainingCards, cardAccuracyUpdates]);\n  \n\n  // get new term\n  useEffect(() => {\n    if (remainingCards.length > 0 && !currentTerm) {\n      getRandomTerm();\n    }\n  }, [remainingCards, getRandomTerm, currentTerm]);\n\n  // Focus input when a new term appears\n  useEffect(() => {\n    if (currentTerm && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [currentTerm]);\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const correctAnswer = isReversed ? currentTerm.term : currentTerm.translation;\n    const secondaryAnswer = isReversed ? '' : currentTerm.secondary_translation;\n    \n    // Check if answer matches correct answer or secondary translation (case-insensitive)\n    const answerLower = answer.toLowerCase().trim();\n    const correctAnswerLower = correctAnswer.toLowerCase().trim();\n    const secondaryAnswerLower = secondaryAnswer ? secondaryAnswer.toLowerCase().trim() : '';\n        \n    if (answerLower === correctAnswerLower || (secondaryAnswerLower && answerLower === secondaryAnswerLower)) {\n      new Audio(correctSound).play();\n      setStatus('correct');\n      updateAccuracy(true);\n      setTimeout(() => {\n        setAnswer('');\n        const newRemainingCards = remainingCards.filter(card => card.id !== currentTerm.id);\n        setRemainingCards(newRemainingCards);\n        \n        // Check if quiz is complete after removing this card\n        if (newRemainingCards.length === 0 && quizStarted && !quizComplete) {\n          setQuizComplete(true);\n        } else {\n          // Clear current term so useEffect will pick a new one\n          setCurrentTerm(null);\n        }\n        \n        setStatus(null);\n      }, 300);\n    } else {\n      // incorrect\n      new Audio(incorrectSound).play();\n      setStatus('incorrect');\n      updateAccuracy(false);\n      setTimeout(() => {\n        alert(`Incorrect! The correct answer was: ${correctAnswer}`);\n      }, 300);\n      setTimeout(() => {\n        setAnswer('');\n        // New term will be selected automatically by useEffect when remainingCards updates\n        setStatus(null);\n      }, 300);\n    }\n  }\n\n\n  const handleRestart = () => {\n    setRemainingCards([...filteredCards]);\n    setQuizComplete(false);\n    setCurrentTerm(null);\n    setAnswer('');\n    setStatus(null);\n    // Don't reset cardAccuracyUpdates - keep previous quiz accuracy intact\n  };\n\n\n  const updateAccuracy = (correct) => {\n    if (!currentTerm) return currentTerm;\n    \n    const old_correct = currentTerm.correct_attempts || 0;\n    const old_total = currentTerm.total_attempts || 0;\n    const new_correct = correct ? old_correct + 1 : old_correct;\n    const new_total = old_total + 1;\n\n    // Update the database\n    fetch(`${config.API_BASE_URL}/cards/${currentTerm.id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ correct_attempts: new_correct, total_attempts: new_total }),\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to update accuracy');\n      }\n    })\n    .catch(error => console.error('Error updating accuracy:', error));\n\n    // Create the updated term\n    const updatedTerm = {\n      ...currentTerm,\n      correct_attempts: new_correct,\n      total_attempts: new_total\n    };\n    \n    setCurrentTerm(updatedTerm);\n    \n    // Track accuracy updates for this card\n    setCardAccuracyUpdates(prev => {\n      const newUpdates = {\n        ...prev,\n        [currentTerm.id]: {\n          correct_attempts: new_correct,\n          total_attempts: new_total\n        }\n      };\n      return newUpdates;\n    });\n    return updatedTerm;\n  }\n\n  if (cards.length === 0) {\n    return (\n      <div style={{ textAlign: 'center', padding: '2rem' }}>\n        Loading cards...\n      </div>\n    );\n  }\n\n  if (filteredCards.length === 0) {\n    return (\n      <div style={{ textAlign: 'center', padding: '2rem' }}>\n        No starred cards found. Star some cards in the edit page first!\n      </div>\n    );\n  }\n\n  if (quizComplete && onComplete) {\n    // In medley mode, show completion message briefly before auto-advance\n    onComplete();\n  } else if (quizComplete && !onComplete) {\n    // Only show restart button when NOT in medley mode\n    return (\n        <div>\n        <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center' }}>\n          <button\n            onClick={handleRestart}\n            style={{\n              padding: '1rem 2rem',\n              fontSize: '1.2rem',\n              cursor: 'pointer'\n            }}\n          >\n            Restart Quiz\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {/* Progress indicator */}\n      <p style={{\n        textAlign: 'center',\n        fontSize: '1.5rem',\n        padding: '1rem',\n        fontWeight: '550',\n      }}>\n        {filteredCards.length - remainingCards.length} / {filteredCards.length} terms completed\n      </p>\n\n      {/* Term and Input */}\n      {currentTerm && (\n        <div style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          margin: '2rem 0',\n        }}>\n          <h2 style={{\n            fontSize: '3rem',\n            fontWeight: 'bold',\n            color: status === 'correct' ? 'green' : status === 'incorrect' ? 'red' : 'black',\n          }}>{isReversed ? currentTerm.translation : currentTerm.term}</h2>\n          <form onSubmit={handleSubmit}>\n            <input \n              ref={inputRef}\n              style={{\n                fontSize: '2rem'\n              }}\n              type=\"text\"\n              value={answer}\n              onChange={(e) => setAnswer(e.target.value)}\n              placeholder=\"Type your answer\"\n              autoFocus\n            />\n          </form>\n        </div>\n      )}\n\n      {/* Reverse Button */}\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n      }}>\n        <button\n          type=\"button\"\n          onClick={() => {\n            // Toggle between normal and reversed\n            setIsReversed(!isReversed);\n          }}\n        >\n          {isReversed ? 'Display Terms' : 'Display Translations'}\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}