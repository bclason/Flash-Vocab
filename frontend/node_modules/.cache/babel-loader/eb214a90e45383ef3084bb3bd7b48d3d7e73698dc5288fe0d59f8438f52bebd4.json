{"ast":null,"code":"import _objectSpread from\"/home/bclason/projects/spanish_app/flash_vocab/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState}from'react';import config from'../../config';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function Quiz(_ref){let{cards,practiceStarredOnly=false,onComplete=null}=_ref;const[answers,setAnswers]=useState({});// array of typed answers\nconst[quizComplete,setQuizComplete]=useState(false);const[score,setScore]=useState(0);const[wrongCards,setWrongCards]=useState([]);const[isReversed,setIsReversed]=useState(false);// Filter cards based on practiceStarredOnly prop\nconst filteredCards=practiceStarredOnly?cards.filter(card=>card.starred===1||card.starred===true):cards;const updateAccuracy=wrong=>{for(const card of filteredCards){let new_correct=card.correct_attempts;let new_total=card.total_attempts;if(!wrong.some(c=>c.id===card.id)){new_correct=card.correct_attempts+1;}new_total=card.total_attempts+1;fetch(\"\".concat(config.API_BASE_URL,\"/cards/\").concat(card.id),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify({correct_attempts:new_correct,total_attempts:new_total})}).then(response=>{if(!response.ok){throw new Error('Failed to update accuracy');}// Database updated successfully\nconsole.log(\"Updated accuracy for card \".concat(card.id,\": \").concat(new_correct,\"/\").concat(new_total));}).catch(error=>console.error('Error updating accuracy:',error));}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',flexDirection:'column',alignItems:'center',justifyContent:'center'},children:filteredCards.map(card=>{var _answers$card$id;return/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',justifyContent:'flex-start',gap:'1rem',width:'60%',padding:'0.5rem 0'},children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'2rem',minWidth:'40%',textAlign:'right'},children:isReversed?card.translation:card.term}),/*#__PURE__*/_jsx(\"input\",{style:{fontSize:'2rem',width:'40%',padding:'.5rem',border:'2px solid #ccc',boxSizing:'border-box'},value:(_answers$card$id=answers[card.id])!==null&&_answers$card$id!==void 0?_answers$card$id:'',onChange:e=>setAnswers(prev=>_objectSpread(_objectSpread({},prev),{},{[card.id]:e.target.value}))})]},card.id);})}),/*#__PURE__*/_jsx(\"div\",{style:{margin:'.5rem',justifyContent:'center',display:'flex'},children:filteredCards.length===0?/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'1.5rem',padding:'1rem'},children:\"No starred cards found\"}):/*#__PURE__*/_jsx(\"button\",{style:{fontSize:'2rem',fontWeight:'bold'},onClick:()=>{// Check answers based on reversed mode - use filteredCards instead of cards (case-insensitive)\nconst wrong=filteredCards.filter(c=>{const userAnswer=(answers[c.id]||'').toLowerCase().trim();const correctAnswer=(isReversed?c.term:c.translation)?(isReversed?c.term:c.translation).toLowerCase().trim():'';const secondaryAnswer=isReversed?'':c.secondary_translation?c.secondary_translation.toLowerCase().trim():'';return userAnswer!==correctAnswer&&(secondaryAnswer?userAnswer!==secondaryAnswer:true);});setWrongCards(wrong);setScore(filteredCards.length-wrong.length);setQuizComplete(true);updateAccuracy(wrong);},children:\"Submit\"})}),quizComplete&&/*#__PURE__*/_jsxs(\"div\",{style:{justifyContent:'center',display:'flex',flexDirection:'column',alignItems:'center',marginTop:'2rem',fontSize:'24px'},children:[/*#__PURE__*/_jsxs(\"p\",{style:{fontWeight:'bold'},children:[\"Score: \",score,\"/\",filteredCards.length]}),/*#__PURE__*/_jsx(\"p\",{style:{fontWeight:'bold'},children:quizComplete&&score===filteredCards.length?'Perfect score!':'Terms to work on:'}),wrongCards.length>0&&/*#__PURE__*/_jsx(\"ul\",{children:wrongCards.map(c=>/*#__PURE__*/_jsxs(\"li\",{children:[isReversed?c.translation:c.term,\": \",isReversed?c.term:c.translation]},c.id))}),onComplete&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>{// Reset quiz state and call onComplete to restart chunk\nsetAnswers({});setQuizComplete(false);setScore(0);setWrongCards([]);onComplete();},style:{padding:'1rem 2rem',fontSize:'1.2rem',cursor:'pointer',marginTop:'1rem'},children:\"Restart Chunk\"})]}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',padding:'1rem'},children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:()=>{// Clear answers and toggle between normal and reversed\nsetAnswers({});setQuizComplete(false);setScore(0);setWrongCards([]);setIsReversed(!isReversed);},children:isReversed?'Show Terms → Translations':'Show Translations → Terms'})})]});}","map":{"version":3,"names":["useState","config","jsx","_jsx","jsxs","_jsxs","Quiz","_ref","cards","practiceStarredOnly","onComplete","answers","setAnswers","quizComplete","setQuizComplete","score","setScore","wrongCards","setWrongCards","isReversed","setIsReversed","filteredCards","filter","card","starred","updateAccuracy","wrong","new_correct","correct_attempts","new_total","total_attempts","some","c","id","fetch","concat","API_BASE_URL","method","headers","body","JSON","stringify","then","response","ok","Error","console","log","catch","error","children","style","display","flexDirection","alignItems","justifyContent","map","_answers$card$id","gap","width","padding","fontSize","minWidth","textAlign","translation","term","border","boxSizing","value","onChange","e","prev","_objectSpread","target","margin","length","fontWeight","onClick","userAnswer","toLowerCase","trim","correctAnswer","secondaryAnswer","secondary_translation","marginTop","cursor","type"],"sources":["/home/bclason/projects/spanish_app/flash_vocab/frontend/src/components/medleyModes/FullQuizMode.js"],"sourcesContent":["import { useState } from 'react';\nimport config from '../../config';\n\nexport default function Quiz({\n    cards,\n    practiceStarredOnly = false,\n    onComplete = null,\n}) {\n  const [answers, setAnswers] = useState({}); // array of typed answers\n  const [quizComplete, setQuizComplete] = useState(false);\n  const [score, setScore] = useState(0);\n  const [wrongCards, setWrongCards] = useState([]);\n\n  const [isReversed, setIsReversed] = useState(false);\n\n  // Filter cards based on practiceStarredOnly prop\n  const filteredCards = practiceStarredOnly \n    ? cards.filter(card => card.starred === 1 || card.starred === true)\n    : cards;\n\n  const updateAccuracy = (wrong) => {\n    for (const card of filteredCards) {\n      let new_correct = card.correct_attempts;\n      let new_total = card.total_attempts;\n      if (!wrong.some(c => c.id === card.id)) {\n        new_correct = card.correct_attempts + 1;\n      }\n      new_total = card.total_attempts + 1;\n\n      fetch(`${config.API_BASE_URL}/cards/${card.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ correct_attempts: new_correct, total_attempts: new_total }),\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to update accuracy');\n        }\n        // Database updated successfully\n        console.log(`Updated accuracy for card ${card.id}: ${new_correct}/${new_total}`);\n      })\n      .catch(error => console.error('Error updating accuracy:', error));\n    }\n  }\n\n\n  return (\n    <div>\n    {/* Terms and Input Boxes */}\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n        {filteredCards.map(card => (\n          <div\n            key={card.id}\n            style={{\n              display: 'flex',\n              alignItems: 'center',   \n              justifyContent: 'flex-start',\n              gap: '1rem',          \n              width: '60%',            \n              padding: '0.5rem 0',\n            }}>\n            <div \n              style={{ \n                fontSize: '2rem', \n                minWidth: '40%', \n                textAlign: 'right'\n              }}>\n              {isReversed ? card.translation : card.term}\n            </div>\n\n            <input\n              style={{\n                fontSize: '2rem',\n                width: '40%',\n                padding: '.5rem',\n                border: '2px solid #ccc',\n                boxSizing: 'border-box'\n              }}\n              value={answers[card.id] ?? ''}\n              onChange={e =>\n                setAnswers(prev => ({ ...prev, [card.id]: e.target.value }))\n              }\n            />\n          </div>\n        ))}\n      </div>\n\n      {/* Button */}\n      <div style={{\n        margin: '.5rem',\n        justifyContent: 'center',\n        display: 'flex'\n      }}>\n        {filteredCards.length === 0 ? (\n          <div style={{ fontSize: '1.5rem', padding: '1rem' }}>\n            No starred cards found\n          </div>\n        ) : (\n          <button style={{\n            fontSize: '2rem',\n            fontWeight: 'bold'      \n          }}\n            onClick={() => {\n              // Check answers based on reversed mode - use filteredCards instead of cards (case-insensitive)\n              const wrong = filteredCards.filter(c => {\n                const userAnswer = (answers[c.id] || '').toLowerCase().trim();\n                const correctAnswer = (isReversed ? c.term : c.translation) ? (isReversed ? c.term : c.translation).toLowerCase().trim() : '';\n                const secondaryAnswer = isReversed ? '' : (c.secondary_translation ? c.secondary_translation.toLowerCase().trim() : '');\n                return userAnswer !== correctAnswer && (secondaryAnswer ? userAnswer !== secondaryAnswer : true);\n              });\n              setWrongCards(wrong);\n              setScore(filteredCards.length - wrong.length);\n              setQuizComplete(true);\n              updateAccuracy(wrong);\n            }}>\n            Submit\n          </button>\n        )}\n      </div>\n      \n      {/* Results */}\n      {quizComplete && (\n        <div style={{\n          justifyContent: 'center',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          marginTop: '2rem',\n          fontSize: '24px',\n        }}>\n          <p style={{\n            fontWeight: 'bold'\n          }}>Score: {score}/{filteredCards.length}</p>\n          <p style={{\n            fontWeight: 'bold'\n          }}>{quizComplete && score === filteredCards.length ? 'Perfect score!' : 'Terms to work on:'}</p>\n\n          {wrongCards.length > 0 && (\n            <ul>\n              {wrongCards.map(c => (\n                <li key={c.id}>\n                  {isReversed ? c.translation : c.term}: {isReversed ? c.term : c.translation}\n                </li>\n              ))}\n            </ul>\n          )}\n\n          {/* Restart Chunk button only in medley mode */}\n          {onComplete && (\n            <button\n              onClick={() => {\n                // Reset quiz state and call onComplete to restart chunk\n                setAnswers({});\n                setQuizComplete(false);\n                setScore(0);\n                setWrongCards([]);\n                onComplete();\n              }}\n              style={{\n                padding: '1rem 2rem',\n                fontSize: '1.2rem',\n                cursor: 'pointer',\n                marginTop: '1rem'\n              }}\n            >\n              Restart Chunk\n            </button>\n          )}\n        </div>\n      )}\n\n      {/* Reverse Button */}\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        padding: '1rem',\n      }}>\n        <button\n          type=\"button\"\n          onClick={() => {\n            // Clear answers and toggle between normal and reversed\n            setAnswers({});\n            setQuizComplete(false);\n            setScore(0);\n            setWrongCards([]);\n            setIsReversed(!isReversed);\n          }}\n        >\n          {isReversed ? 'Show Terms → Translations' : 'Show Translations → Terms'}\n        </button>\n      </div>\n    </div>\n  );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}