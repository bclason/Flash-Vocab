{"ast":null,"code":"import _objectSpread from\"/home/bclason/projects/spanish_app/flash_vocab/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useCallback}from'react';import config from'../../config';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function MultipleChoiceMode(_ref){let{cards,onComplete=null}=_ref;const[remainingCards,setRemainingCards]=useState([...cards]);const[currentCardIndex,setCurrentCardIndex]=useState(0);const[choices,setChoices]=useState([]);const[selectedAnswer,setSelectedAnswer]=useState(null);const[showResult,setShowResult]=useState(false);const[isReversed,setIsReversed]=useState(false);const[quizComplete,setQuizComplete]=useState(false);const[cardAttempts,setCardAttempts]=useState({});// Track attempts per card\nconst currentCard=remainingCards[currentCardIndex];// Generate 4 multiple choice options\nconst generateChoices=useCallback((correctCard,allCards)=>{if(!correctCard||allCards.length<4)return[];const correctAnswer=isReversed?correctCard.term:correctCard.translation;// Get 3 random incorrect answers\nconst otherCards=allCards.filter(card=>card.id!==correctCard.id);const shuffledOthers=[...otherCards].sort(()=>Math.random()-0.5);const incorrectAnswers=shuffledOthers.slice(0,3).map(card=>isReversed?card.term:card.translation);// Combine correct and incorrect answers, then shuffle\nconst allChoices=[correctAnswer,...incorrectAnswers];return allChoices.sort(()=>Math.random()-0.5);},[isReversed]);// Reset remaining cards when cards prop changes\nuseEffect(()=>{setRemainingCards([...cards]);setCurrentCardIndex(0);setQuizComplete(false);},[cards]);// Generate choices when current card changes\nuseEffect(()=>{if(currentCard&&cards.length>=4){const newChoices=generateChoices(currentCard,cards);setChoices(newChoices);}},[currentCard,cards,generateChoices]);// Reset UI state when card changes\nuseEffect(()=>{if(currentCard){setSelectedAnswer(null);setShowResult(false);}},[currentCard]);const handleAnswerClick=choice=>{if(showResult)return;// Prevent clicking after answer is shown\nsetSelectedAnswer(choice);setShowResult(true);const correctAnswer=isReversed?currentCard.term:currentCard.translation;const isCorrect=choice===correctAnswer;// Update accuracy for this card\nupdateAccuracy(currentCard,isCorrect);// Auto advance after 1.5 seconds\nsetTimeout(()=>{if(isCorrect){// Remove the current card from remaining cards (got it right)\nconst newRemainingCards=remainingCards.filter((_,index)=>index!==currentCardIndex);setRemainingCards(newRemainingCards);// Check if quiz is complete\nif(newRemainingCards.length===0){setQuizComplete(true);// Auto-advance if in medley mode\nif(onComplete){onComplete();}return;}// Adjust currentCardIndex if needed\nif(currentCardIndex>=newRemainingCards.length){setCurrentCardIndex(0);}}else{// Move to next card (wrong answer stays in the pool)\nif(remainingCards.length>1){if(currentCardIndex<remainingCards.length-1){setCurrentCardIndex(prev=>prev+1);}else{setCurrentCardIndex(0);// Loop back to start\n}}// If only 1 card left, stay on the same card (don't change index)\n}// Reset the result display state for the next question\nsetShowResult(false);setSelectedAnswer(null);},1000);};const handleRestart=()=>{setRemainingCards([...cards]);setCurrentCardIndex(0);setQuizComplete(false);setShowResult(false);setSelectedAnswer(null);setCardAttempts({});// Reset session tracking\n};const updateAccuracy=(card,correct)=>{// Get current attempts for this card (including session updates)\nconst currentAttempts=cardAttempts[card.id]||{correct:card.correct_attempts||0,total:card.total_attempts||0};const new_correct=correct?currentAttempts.correct+1:currentAttempts.correct;const new_total=currentAttempts.total+1;// Update our session tracking\nsetCardAttempts(prev=>_objectSpread(_objectSpread({},prev),{},{[card.id]:{correct:new_correct,total:new_total}}));console.log(\"MCQ - Card \".concat(card.id,\": correct=\").concat(correct,\", new_correct=\").concat(new_correct,\", new_total=\").concat(new_total));// Update the database\nfetch(\"\".concat(config.API_BASE_URL,\"/cards/\").concat(card.id),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify({correct_attempts:new_correct,total_attempts:new_total})}).then(response=>{if(!response.ok){throw new Error('Failed to update accuracy');}console.log(\"MCQ - Database updated for card \".concat(card.id,\": \").concat(new_correct,\"/\").concat(new_total));}).catch(error=>console.error('Error updating accuracy:',error));};const getButtonStyle=choice=>{if(!showResult){return{padding:'1rem',fontSize:'1.75rem',cursor:'pointer',minHeight:'80px',width:'100%',display:'flex',alignItems:'center',justifyContent:'center',textAlign:'center'};}const correctAnswer=isReversed?currentCard.term:currentCard.translation;const isCorrect=choice===correctAnswer;const isSelected=choice===selectedAnswer;let backgroundColor='#f8f9fa';let borderColor='#dee2e6';if(isCorrect){backgroundColor='#d4edda';borderColor='#28a745';}else if(isSelected&&!isCorrect){backgroundColor='#f8d7da';borderColor='#dc3545';}return{padding:'1rem',fontSize:'1.75rem',backgroundColor,border:\"2px solid \".concat(borderColor),cursor:'pointer',minHeight:'80px',width:'100%',display:'flex',alignItems:'center',justifyContent:'center',textAlign:'center'};};if(cards.length===0){return/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center',padding:'2rem'},children:\"Loading cards...\"});}if(cards.length<4){return/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center',padding:'2rem'},children:\"Need at least 4 cards for multiple choice!\"});}if(quizComplete&&!onComplete){// Only show restart button when NOT in medley mode\nreturn/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',gap:'1rem',justifyContent:'center'},children:/*#__PURE__*/_jsx(\"button\",{onClick:handleRestart,style:{padding:'1rem 2rem',fontSize:'1.2rem',cursor:'pointer'},children:\"Restart Quiz\"})})});}if(!currentCard){return/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center',padding:'2rem'},children:\"No more cards to practice!\"});}return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center'},children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'2.5rem',fontWeight:'bold',padding:'2rem',borderRadius:'12px',minHeight:'120px',display:'flex',alignItems:'center',justifyContent:'center'},children:isReversed?currentCard.translation:currentCard.term}),/*#__PURE__*/_jsx(\"div\",{style:{display:'grid',gridTemplateColumns:'1fr 1fr',gridTemplateRows:'1fr 1fr',gap:'1.5rem',maxWidth:'800px',margin:'0 auto',padding:'0 2rem'},children:choices.map((choice,index)=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAnswerClick(choice),style:getButtonStyle(choice),disabled:showResult,children:choice},index))}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',marginTop:'2rem'},children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:()=>{// Toggle between normal and reversed\nsetIsReversed(!isReversed);},children:isReversed?'Show Terms First':'Show Translations First'})})]});}","map":{"version":3,"names":["useState","useEffect","useCallback","config","jsx","_jsx","jsxs","_jsxs","MultipleChoiceMode","_ref","cards","onComplete","remainingCards","setRemainingCards","currentCardIndex","setCurrentCardIndex","choices","setChoices","selectedAnswer","setSelectedAnswer","showResult","setShowResult","isReversed","setIsReversed","quizComplete","setQuizComplete","cardAttempts","setCardAttempts","currentCard","generateChoices","correctCard","allCards","length","correctAnswer","term","translation","otherCards","filter","card","id","shuffledOthers","sort","Math","random","incorrectAnswers","slice","map","allChoices","newChoices","handleAnswerClick","choice","isCorrect","updateAccuracy","setTimeout","newRemainingCards","_","index","prev","handleRestart","correct","currentAttempts","correct_attempts","total","total_attempts","new_correct","new_total","_objectSpread","console","log","concat","fetch","API_BASE_URL","method","headers","body","JSON","stringify","then","response","ok","Error","catch","error","getButtonStyle","padding","fontSize","cursor","minHeight","width","display","alignItems","justifyContent","textAlign","isSelected","backgroundColor","borderColor","border","style","children","gap","onClick","fontWeight","borderRadius","gridTemplateColumns","gridTemplateRows","maxWidth","margin","disabled","marginTop","type"],"sources":["/home/bclason/projects/spanish_app/flash_vocab/frontend/src/components/medleyModes/MultipleChoiceMode.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport config from '../../config';\n\nexport default function MultipleChoiceMode({ \n  cards, \n  onComplete = null,\n}) {\n  const [remainingCards, setRemainingCards] = useState([...cards]);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [choices, setChoices] = useState([]);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showResult, setShowResult] = useState(false);\n  const [isReversed, setIsReversed] = useState(false);\n  const [quizComplete, setQuizComplete] = useState(false);\n  const [cardAttempts, setCardAttempts] = useState({}); // Track attempts per card\n  \n  const currentCard = remainingCards[currentCardIndex];\n\n  // Generate 4 multiple choice options\n  const generateChoices = useCallback((correctCard, allCards) => {\n    if (!correctCard || allCards.length < 4) return [];\n\n    const correctAnswer = isReversed ? correctCard.term : correctCard.translation;\n    \n    // Get 3 random incorrect answers\n    const otherCards = allCards.filter(card => card.id !== correctCard.id);\n    const shuffledOthers = [...otherCards].sort(() => Math.random() - 0.5);\n    const incorrectAnswers = shuffledOthers\n      .slice(0, 3)\n      .map(card => isReversed ? card.term : card.translation);\n\n    // Combine correct and incorrect answers, then shuffle\n    const allChoices = [correctAnswer, ...incorrectAnswers];\n    return allChoices.sort(() => Math.random() - 0.5);\n  }, [isReversed]);\n\n  // Reset remaining cards when cards prop changes\n  useEffect(() => {\n    setRemainingCards([...cards]);\n    setCurrentCardIndex(0);\n    setQuizComplete(false);\n  }, [cards]);\n\n  // Generate choices when current card changes\n  useEffect(() => {\n    if (currentCard && cards.length >= 4) {\n      const newChoices = generateChoices(currentCard, cards);\n      setChoices(newChoices);\n    }\n  }, [currentCard, cards, generateChoices]);\n\n  // Reset UI state when card changes\n  useEffect(() => {\n    if (currentCard) {\n      setSelectedAnswer(null);\n      setShowResult(false);\n    }\n  }, [currentCard]);\n\n  const handleAnswerClick = (choice) => {\n    if (showResult) return; // Prevent clicking after answer is shown\n\n    setSelectedAnswer(choice);\n    setShowResult(true);\n\n    const correctAnswer = isReversed ? currentCard.term : currentCard.translation;\n    const isCorrect = choice === correctAnswer;\n\n    // Update accuracy for this card\n    updateAccuracy(currentCard, isCorrect);\n\n    // Auto advance after 1.5 seconds\n    setTimeout(() => {\n      if (isCorrect) {\n        // Remove the current card from remaining cards (got it right)\n        const newRemainingCards = remainingCards.filter((_, index) => index !== currentCardIndex);\n        setRemainingCards(newRemainingCards);\n        // Check if quiz is complete\n        if (newRemainingCards.length === 0) {\n          setQuizComplete(true);\n          // Auto-advance if in medley mode\n          if (onComplete) {\n            onComplete();\n          }\n          return;\n        }\n        \n        // Adjust currentCardIndex if needed\n        if (currentCardIndex >= newRemainingCards.length) {\n          setCurrentCardIndex(0);\n        }\n      } else {\n        // Move to next card (wrong answer stays in the pool)\n        if (remainingCards.length > 1) {\n          if (currentCardIndex < remainingCards.length - 1) {\n            setCurrentCardIndex(prev => prev + 1);\n          } else {\n            setCurrentCardIndex(0); // Loop back to start\n          }\n        }\n        // If only 1 card left, stay on the same card (don't change index)\n      }\n      // Reset the result display state for the next question\n      setShowResult(false);\n      setSelectedAnswer(null);\n    }, 1000);\n  };\n\n\n  const handleRestart = () => {\n    setRemainingCards([...cards]);\n    setCurrentCardIndex(0);\n    setQuizComplete(false);\n    setShowResult(false);\n    setSelectedAnswer(null);\n    setCardAttempts({}); // Reset session tracking\n  };\n\n\n  const updateAccuracy = (card, correct) => {\n    // Get current attempts for this card (including session updates)\n    const currentAttempts = cardAttempts[card.id] || { \n      correct: card.correct_attempts || 0, \n      total: card.total_attempts || 0 \n    };\n    \n    const new_correct = correct ? currentAttempts.correct + 1 : currentAttempts.correct;\n    const new_total = currentAttempts.total + 1;\n    \n    // Update our session tracking\n    setCardAttempts(prev => ({\n      ...prev,\n      [card.id]: { correct: new_correct, total: new_total }\n    }));\n    \n    console.log(`MCQ - Card ${card.id}: correct=${correct}, new_correct=${new_correct}, new_total=${new_total}`);\n    \n    // Update the database\n    fetch(`${config.API_BASE_URL}/cards/${card.id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ correct_attempts: new_correct, total_attempts: new_total }),\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to update accuracy');\n      }\n      console.log(`MCQ - Database updated for card ${card.id}: ${new_correct}/${new_total}`);\n    })\n    .catch(error => console.error('Error updating accuracy:', error));\n  };\n\n  const getButtonStyle = (choice) => {\n    if (!showResult) {\n      return {\n        padding: '1rem',\n        fontSize: '1.75rem',\n        cursor: 'pointer',\n        minHeight: '80px',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        textAlign: 'center'\n      };\n    }\n\n    const correctAnswer = isReversed ? currentCard.term : currentCard.translation;\n    const isCorrect = choice === correctAnswer;\n    const isSelected = choice === selectedAnswer;\n\n    let backgroundColor = '#f8f9fa';\n    let borderColor = '#dee2e6';\n\n    if (isCorrect) {\n      backgroundColor = '#d4edda';\n      borderColor = '#28a745';\n    } else if (isSelected && !isCorrect) {\n      backgroundColor = '#f8d7da';\n      borderColor = '#dc3545';\n    }\n\n    return {\n      padding: '1rem',\n      fontSize: '1.75rem',\n      backgroundColor,\n      border: `2px solid ${borderColor}`,\n      cursor: 'pointer',\n      minHeight: '80px',\n      width: '100%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      textAlign: 'center'\n    };\n  };\n\n  if (cards.length === 0) {\n    return (\n      <div style={{ textAlign: 'center', padding: '2rem' }}>\n        Loading cards...\n      </div>\n    );\n  }\n\n  if (cards.length < 4) {\n    return (\n      <div style={{ textAlign: 'center', padding: '2rem' }}>\n        Need at least 4 cards for multiple choice!\n      </div>\n    );\n  }\n\n  if (quizComplete && !onComplete) {\n    // Only show restart button when NOT in medley mode\n    return (\n        <div>\n        <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center' }}>\n          <button\n            onClick={handleRestart}\n            style={{\n              padding: '1rem 2rem',\n              fontSize: '1.2rem',\n              cursor: 'pointer'\n            }}\n          >\n            Restart Quiz\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentCard) {\n    return (\n      <div style={{ textAlign: 'center', padding: '2rem' }}>\n        No more cards to practice!\n      </div>\n    );\n  }\n\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n\n      {/* Question */}\n      <div style={{\n        fontSize: '2.5rem',\n        fontWeight: 'bold',\n        padding: '2rem',\n        borderRadius: '12px',\n        minHeight: '120px',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }}>\n        {isReversed ? currentCard.translation : currentCard.term}\n      </div>\n\n      {/* Multiple Choice Buttons - 2x2 Grid */}\n      <div style={{\n        display: 'grid',\n        gridTemplateColumns: '1fr 1fr',\n        gridTemplateRows: '1fr 1fr',\n        gap: '1.5rem',\n        maxWidth: '800px',\n        margin: '0 auto',\n        padding: '0 2rem'\n      }}>\n        {choices.map((choice, index) => (\n          <button\n            key={index}\n            onClick={() => handleAnswerClick(choice)}\n            style={getButtonStyle(choice)}\n            disabled={showResult}\n          >\n            {choice}\n          </button>\n        ))}\n      </div>\n\n      {/* Reverse Button */}\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '2rem',\n      }}>\n        <button\n          type=\"button\"\n          onClick={() => {\n            // Toggle between normal and reversed\n            setIsReversed(!isReversed);\n          }}\n        >\n          {isReversed ? 'Show Terms First' : 'Show Translations First'}\n        </button>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}